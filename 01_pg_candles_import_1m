# 01_pg_candles_import_1m.py
# Descarga velas OHLCV de 1 minuto para s√≠mbolos activos y las almacena en la tabla ohlcv_raw_1m.
# Considera l√≠mites de la API REST de Bitget y arma el proceso en paquetes.
# No usa multiproceso para evitar rate limits.

import time
import ccxt
import psycopg2
from sqlalchemy import create_engine
import pandas as pd
from datetime import datetime, timedelta
import pytz
import math

from parmspg import API_KEY, API_SECRET, API_PASSPHRASE, DB_HOST, DB_PORT, DB_USER, DB_PASSWORD, DB_NAME

# Par√°metros de la API Bitget
LIMIT_PER_FETCH = 200  # Bitget m√°xima cantidad por llamada OHLCV
RATE_LIMIT_SECONDS = 1.2  # Bitget ~50-60 req/min, dejamos margen

DAYS_PER_BATCH = 3  # D√≠as por paquete para evitar timeouts o exceso de datos

TIMEFRAME_STR = '1m'
TIMEFRAME_MIN = 1

# --- Inicializaci√≥n del Exchange ---
try:
    exchange = ccxt.bitget({
        'apiKey': API_KEY,
        'secret': API_SECRET,
        'password': API_PASSPHRASE,
        'enableRateLimit': True,
        'options': {
            'defaultType': 'swap',  # Para futuros
            'adjustForTimeZone': False,
        }
    })
    exchange.load_markets()
    print("Conexi√≥n con CCXT (Bitget) establecida y mercados cargados.")
except Exception as e:
    print(f"Error al inicializar CCXT con Bitget: {e}")
    exit()

# --- Conexi√≥n a PostgreSQL ---
try:
    conn = psycopg2.connect(
        host=DB_HOST,
        port=DB_PORT,
        user=DB_USER,
        password=DB_PASSWORD,
        database=DB_NAME
    )
    cursor = conn.cursor()
    cursor.execute("SET TIME ZONE 'UTC'")
    print("Conexi√≥n a PostgreSQL establecida y configurada en UTC.")

    engine = create_engine(f'postgresql+psycopg2://{DB_USER}:{DB_PASSWORD}@{DB_HOST}:{DB_PORT}/{DB_NAME}')
except psycopg2.Error as err:
    print(f"Error al conectar o configurar PostgreSQL: {err}")
    exit()
except UnicodeDecodeError as ude:
    print(f"Error de codificaci√≥n en las credenciales: {ude}")
    exit()

# --- Funci√≥n para obtener OHLCV 1m en paquetes ---
def fetch_ohlcv_1m(symbol_for_api, since_ts, until_ts):
    """
    Obtiene datos OHLCV 1m usando CCXT, para Bitget tipo 'swap'.
    Devuelve lista de [timestamp, open, high, low, close, volume]
    """
    all_data = []
    ts = since_ts
    params = {'type': 'swap'}
    while ts < until_ts:
        try:
            bars = exchange.fetch_ohlcv(symbol_for_api, TIMEFRAME_STR, since=ts, limit=LIMIT_PER_FETCH, params=params)
        except ccxt.RateLimitExceeded as e:
            print(f"[{symbol_for_api}] L√≠mite de tasa excedido, esperando 60s... {e}")
            time.sleep(60)
            continue
        except ccxt.NetworkError as e:
            print(f"[{symbol_for_api}] Error de red: {e}. Reintentando en 10s...")
            time.sleep(10)
            continue
        except ccxt.ExchangeError as e:
            print(f"[{symbol_for_api}] Error del exchange: {e}. Saltando fetch para este rango.")
            break
        except Exception as e:
            print(f"[{symbol_for_api}] Error inesperado al traer datos: {e}. Reintentando en 5s...")
            time.sleep(5)
            continue

        if not bars:
            break

        newest_ts_in_batch = bars[-1][0]
        added_count = 0
        for bar in bars:
            if bar[0] >= until_ts:
                continue
            if bar[0] >= ts:
                all_data.append(bar)
                added_count += 1

        if added_count == 0 or newest_ts_in_batch < ts:
            break

        ts = newest_ts_in_batch + 1
        time.sleep(RATE_LIMIT_SECONDS)  # Respeta rate limit

    return all_data

# --- Almacenamiento a ohlcv_raw_1m ---
def store_ohlcv_1m(symbol_in_db, bars, start_dt_req, end_dt_req):
    if not bars:
        return 0

    records = []
    start_ts_req = int(start_dt_req.timestamp() * 1000)
    end_ts_req = int(end_dt_req.timestamp() * 1000)

    for bar_data in bars:
        ts, o, h, l, c, v = bar_data
        if ts < start_ts_req or ts >= end_ts_req:
            continue
        dt_candle = datetime.fromtimestamp(ts / 1000, tz=pytz.UTC)
        o = float(o) if o is not None else 0.0
        h = float(h) if h is not None else 0.0
        l = float(l) if l is not None else 0.0
        c = float(c) if c is not None else 0.0
        v = float(v) if v is not None else 0.0

        records.append({
            'ticker': symbol_in_db,
            'timestamp': dt_candle,
            'open': o,
            'high': h,
            'low': l,
            'close': c,
            'volume': v
        })

    if not records:
        return 0

    df = pd.DataFrame(records)

    try:
        df.to_sql(
            'ohlcv_raw_1m',
            engine,
            if_exists='append',
            index=False,
            method='multi',
            schema=None
        )
        inserted_count = len(df)
        return inserted_count
    except Exception as err:
        print(f"[{symbol_in_db}] Error al insertar en BD ohlcv_raw_1m: {err}")
        print("Primer registro (si existe):", records[0] if records else "N/A")
        conn.rollback()
        return -1

# --- Proceso principal por paquetes ---
def procesar_rango_1m(symbol_in_db, start_dt, end_dt):
    """
    Procesa un rango de fechas para un ticker, obteniendo datos de 1 minuto.
    """
    start_dt = start_dt.replace(tzinfo=pytz.UTC)
    end_dt = end_dt.replace(tzinfo=pytz.UTC)

    # Adaptar formato para Bitget: BTC/USDT -> BTC/USDT:USDT
    parts = symbol_in_db.split('/')
    if len(parts) == 2:
        base = parts[0]
        quote = parts[1]
        symbol_for_api = f"{base}/{quote}:{quote}"
    else:
        print(f"Error: Formato de ticker inesperado en la BD: {symbol_in_db}. No se puede construir s√≠mbolo API.")
        return

    print(f"üîπ {symbol_in_db} ({symbol_for_api}) - 1m: {start_dt.strftime('%Y-%m-%d %H:%M')} ‚Üí {end_dt.strftime('%Y-%m-%d %H:%M')}")
    since_ts = int(start_dt.timestamp() * 1000)
    until_ts = int(end_dt.timestamp() * 1000)

    bars = fetch_ohlcv_1m(symbol_for_api, since_ts, until_ts)
    if not bars:
        print(f"   ‚ö†Ô∏è Sin datos obtenidos para {symbol_in_db} en este rango.")
        return

    total_inserted = store_ohlcv_1m(symbol_in_db, bars, start_dt, end_dt)
    if total_inserted == -1:
        print(f"   ‚ùå Error al guardar velas para {symbol_in_db} - 1m.")
    elif total_inserted == 0 and bars:
        print(f"   ‚ÑπÔ∏è No se insertaron velas nuevas (posiblemente ya exist√≠an) para {symbol_in_db} - 1m.")
    elif total_inserted > 0:
        print(f"   ‚úÖ {total_inserted} registros afectados en BD para {symbol_in_db} - 1m.")
    else:
        print(f"   ? Situaci√≥n inesperada para {symbol_in_db} - 1m.")

# --- Main ---
def main():
    global conn, cursor, engine
    try:
        cursor.execute("SELECT ticker FROM tickers WHERE activo = true")
        symbols_in_db = [row[0] for row in cursor.fetchall()]
        if not symbols_in_db:
            print("No hay tickers activos encontrados en la tabla 'tickers'. Finalizando.")
            return
        print(f"Tickers base a procesar: {symbols_in_db}")

        # AJUSTA RANGO DE FECHAS A LO DESEADO
        year_start_dt = datetime(2023, 1, 1, 0, 0, 0, tzinfo=pytz.UTC)
        year_end_dt = datetime(2023, 6, 1, 0, 0, 0, tzinfo=pytz.UTC)

        total_days = (year_end_dt - year_start_dt).days
        if total_days <= 0:
            print("Error: La fecha de fin debe ser posterior a la fecha de inicio.")
            return
        total_batches = math.ceil(total_days / DAYS_PER_BATCH)
        print(f"Procesando rango de fechas: {year_start_dt.strftime('%Y-%m-%d')} a {(year_end_dt - timedelta(days=1)).strftime('%Y-%m-%d')}")
        print(f"Total d√≠as: {total_days}, Lotes de {DAYS_PER_BATCH} d√≠as, Total Lotes: {total_batches}.")

        current_batch_start_dt = year_start_dt
        batch_num = 0

        while current_batch_start_dt < year_end_dt:
            batch_num += 1
            current_batch_end_dt = current_batch_start_dt + timedelta(days=DAYS_PER_BATCH)
            if current_batch_end_dt > year_end_dt:
                current_batch_end_dt = year_end_dt

            print(f"\n--- Procesando Lote {batch_num}/{total_batches} ({current_batch_start_dt.strftime('%Y-%m-%d')} a {(current_batch_end_dt - timedelta(microseconds=1)).strftime('%Y-%m-%d %H:%M')}) ---")

            for symbol_db in symbols_in_db:
                print(f"\n Procesando S√≠mbolo DB: {symbol_db}")
                try:
                    procesar_rango_1m(symbol_db, current_batch_start_dt, current_batch_end_dt)
                    time.sleep(0.5)
                except Exception as e:
                    print(f"!! Error INESPERADO procesando {symbol_db} en lote {batch_num}: {e}")
                    import traceback
                    traceback.print_exc()

            try:
                print(f"\n--- Fin Lote {batch_num}/{total_batches}. Realizando COMMIT. ---")
                conn.commit()
            except psycopg2.Error as err:
                print(f"!! Error al realizar COMMIT para el lote {batch_num}: {err}")
                print("Intentando rollback...")
                conn.rollback()

            current_batch_start_dt = current_batch_end_dt
            time.sleep(2)

        print(f"\nProceso completado para el rango de fechas definido.")

    except psycopg2.Error as err:
        print(f"Error de PostgreSQL durante la ejecuci√≥n principal: {err}")
    except ccxt.AuthenticationError as e:
        print(f"Error de autenticaci√≥n con Bitget: {e}. Verifica tus credenciales API en parmspg.py")
    except ccxt.ExchangeNotAvailable as e:
        print(f"Error: Exchange Bitget no disponible o problemas de conexi√≥n: {e}")
    except Exception as e:
        print(f"Error inesperado en main: {e}")
        import traceback
        traceback.print_exc()
    finally:
        if locals().get('cursor'):
            try:
                cursor.close()
                print("Cursor de PostgreSQL cerrado.")
            except:
                pass
        if locals().get('conn') and conn:
            try:
                conn.close()
                print("Conexi√≥n a PostgreSQL cerrada.")
            except:
                pass
        if locals().get('engine'):
            try:
                engine.dispose()
                print("Motor SQLAlchemy cerrado.")
            except:
                pass

if __name__ == '__main__':
    main()
